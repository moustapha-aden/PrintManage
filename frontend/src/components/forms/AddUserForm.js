// src/components/forms/AddUserForm.js

import React, { useState, useEffect, useMemo,forwardRef } from 'react';
import { FiX } from 'react-icons/fi';
import axios from 'axios';
import '../styles/FormModal.css';

import { API_BASE_URL } from '../../api';

// Fonction utilitaire pour générer un mot de passe avec des lettres et des chiffres
const generatePassword = (length = 12) => {
    // La chaîne de caractères ne contient plus de symboles spéciaux
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
};

const AddUserForm =  forwardRef(({ userToEdit, onSave, onCloseForm, companies,style },formRef) => {
    const [userData, setUserData] = useState({
        name: '',
        email: '',
        role: 'client',
        company_id: '',
        department_id: '',
        status: 'active',
    });
    const [autoGeneratedPassword, setAutoGeneratedPassword] = useState('');
    const [formError, setFormError] = useState('');

    const [departments, setDepartments] = useState([]);
    const [loadingDepartments, setLoadingDepartments] = useState(false);
    const [errorDepartments, setErrorDepartments] = useState(null);

    // Initialise le formulaire lors du montage ou quand userToEdit change
    useEffect(() => {
        if (userToEdit) {
            setUserData({
                name: userToEdit.name || '',
                email: userToEdit.email || '',
                role: userToEdit.role || 'client',
                // S'assurer que les IDs sont des nombres lors de l'initialisation depuis userToEdit
                company_id: userToEdit.company_id ? Number(userToEdit.company_id) : '',
                department_id: userToEdit.department_id ? Number(userToEdit.department_id) : '',
                status: userToEdit.status || 'active',
            });
            setAutoGeneratedPassword(''); // Pas de génération de mot de passe en mode édition
        } else {
            setUserData({
                name: '',
                email: '',
                role: 'client',
                company_id: '',
                department_id: '',
                status: 'active',
            });
            setAutoGeneratedPassword(generatePassword()); // Génère un mot de passe pour les nouveaux utilisateurs
        }
        setFormError('');
    }, [userToEdit]);

    // Récupère les départements en fonction de la société sélectionnée
    useEffect(() => {
        const fetchDepartmentsForCompany = async () => {
            const companyId = userData.company_id;
            // Si pas de companyId ou si le rôle n'est pas client, vider les départements et potentiellement department_id
            if (!companyId || userData.role !== 'client') {
                setDepartments([]);
                // ⭐ NOUVEAU : Réinitialise department_id seulement si le rôle n'est pas client
                // ou si la company_id est vide pour éviter de vider la valeur déjà présente lors de l'initialisation
                if (userData.department_id !== '' && userData.role !== 'client') {
                    setUserData(prev => ({ ...prev, department_id: '' }));
                } else if (userData.department_id !== '' && !companyId) {
                    setUserData(prev => ({ ...prev, department_id: '' }));
                }
                return;
            }
            try {
                setLoadingDepartments(true);
                setErrorDepartments(null);
                const token = localStorage.getItem('authToken');
                const response = await axios.get(`${API_BASE_URL}/departments?company_id=${companyId}`, {
                    headers: {
                        'Accept': 'application/json',
                        'Authorization': `Bearer ${token}`,
                    },
                });
                setDepartments(response.data);
                
                // Si le département sélectionné n'est plus valide pour la nouvelle liste, le réinitialiser
                if (userData.department_id && !response.data.some(dep => dep.id === userData.department_id)) {
                    setUserData(prev => ({ ...prev, department_id: '' }));
                }

            } catch (error) {
                console.error(`Erreur lors de la récupération des départements pour la société ${companyId}:`, error);
                setErrorDepartments("Impossible de charger les départements. " + (error.response?.data?.message || error.message));
                setDepartments([]);
                setUserData(prev => ({ ...prev, department_id: '' })); // Réinitialise en cas d'erreur de chargement
            } finally {
                setLoadingDepartments(false);
            }
        };
        fetchDepartmentsForCompany();
    }, [userData.company_id, userData.role, userData.department_id]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setUserData(prevData => {
            let newData = { ...prevData };
            
            // ⭐ CLÉ DE LA CORRECTION : Convertir en nombre pour les IDs ⭐
            if (name === "company_id" || name === "department_id") {
                newData[name] = value ? Number(value) : ''; // Convertit en nombre ou garde la chaîne vide
            } else {
                newData[name] = value;
            }

            if (name === "role" && value !== "client") {
                newData.company_id = '';
                newData.department_id = '';
            }
            if (name === "company_id") {
                newData.department_id = ''; // Réinitialise le département si la société change
            }
            return newData;
        });
        setFormError('');
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        setFormError('');

        if (userData.role === 'client') {
            if (!userData.company_id) {
                setFormError("Un client doit être lié à une société.");
                return;
            }
            // if (userData.company_id && !userData.department_id) {
            //     setFormError("Un client doit être lié à un département.");
            //     return;
            // }
        }
        
        const dataToSend = { ...userData };
        
        if (!userToEdit) {
            dataToSend.password = autoGeneratedPassword;
        }

        // Conversion finale en nombres ou null pour l'API
        dataToSend.company_id = dataToSend.company_id ? Number(dataToSend.company_id) : null;
        dataToSend.department_id = dataToSend.department_id ? Number(dataToSend.department_id) : null;

        delete dataToSend.statusDisplay;
        delete dataToSend.statusDisplay; // Supprime statusDisplay
        delete dataToSend.roleDisplay; // Supprime roleDisplay
        
        onSave(dataToSend);
        onCloseForm();
    };

    const activeCompanies = useMemo(() => {
        return Array.isArray(companies) ? companies.filter(company => 
            company.status && company.status.toLowerCase() === 'active'
        ) : [];
    }, [companies]);

    return (
        <div className="modal-overlay" style={style} ref={formRef}>
            <div className="modal-content" style={style}>
                <div className="modal-header" style={style}>
                    <h2 style={style}>{userToEdit ? 'Modifier Utilisateur' : 'Ajouter un Nouvel Utilisateur'}</h2>
                    <button onClick={onCloseForm} className="modal-close-button" style={style}>
                        <FiX />
                    </button>
                </div>
                <form onSubmit={handleSubmit}>
                    {formError && <p className="form-error-message" style={style}>{formError}</p>}
                    
                    <div className="form-group" style={style}>
                        <label htmlFor="name" style={style}>Nom complet:</label>
                        <input
                            style={style}
                            type="text"
                            id="name"
                            name="name"
                            value={userData.name}
                            onChange={handleChange}
                            required
                        />
                    </div>
                    <div className="form-group" style={style}>
                        <label htmlFor="email" style={style}>Email:</label>
                        <input
                            style={style}
                            type="email"
                            id="email"
                            name="email"
                            value={userData.email}
                            onChange={handleChange}
                            required
                        />
                    </div>
                    
                    <div className="form-group" style={style}>
                        <label htmlFor="role" style={style}>Rôle:</label>
                        <select
                            style={style}
                            id="role"
                            name="role"
                            value={userData.role}
                            onChange={handleChange}
                            required
                        >
                            <option style={style} value="admin">Admin</option>
                            <option style={style} value="client">Client</option>
                            <option style={style} value="technicien">Technicien</option>
                        </select>
                    </div>

                    {userData.role === 'client' && (
                        <>
                            <div className="form-group"style={style}>
                                <label htmlFor="company_id" style={style}>Société:</label>
                                <select
                                    style={style}
                                    id="company_id"
                                    name="company_id"
                                    value={userData.company_id}
                                    onChange={handleChange}
                                    required={userData.role === 'client'}
                                >
                                    <option style={style} value="">-- Sélectionner une société --</option>
                                    {activeCompanies.map(comp => (
                                        <option style={style} key={comp.id} value={comp.id}>
                                            {comp.name}
                                        </option>
                                    ))}
                                </select>
                            </div>

                            <div className="form-group" style={style}>
                                <label htmlFor="department_id" style={style}>Département:</label>
                                {loadingDepartments ? (
                                    <p style={style}>Chargement des départements...</p>
                                ) : errorDepartments ? (
                                    <p className="error-message" style={style}>{errorDepartments}</p>
                                ) : (
                                    <select
                                        style={style}
                                        id="department_id"
                                        name="department_id"
                                        value={userData.department_id}
                                        onChange={handleChange}
                                        // required={userData.role === 'client' }
                                        disabled={!userData.company_id || departments.length === 0}
                                    >
                                        <option value="" style={style}>-- Sélectionner un département --</option>
                                        {departments.map(department => (
                                            <option style={style} key={department.id} value={department.id}>
                                                {department.name}
                                            </option>
                                        ))}
                                    </select>
                                )}
                                {/* {!userData.company_id && <p className="info-message">Sélectionnez d'abord une société pour voir les départements.</p>} */}
                                {userData.company_id && departments.length === 0 && !loadingDepartments && !errorDepartments && <p className="info-message" style={style}>Aucun département trouvé pour cette société.</p>}
                            </div>
                        </>
                    )}

                    <div className="form-group" style={style}>
                        <label htmlFor="status" style={style}>Statut:</label>
                        <select
                            style={style}
                            id="status"
                            name="status"
                            value={userData.status}
                            onChange={handleChange}
                            required
                        >
                            <option value="active" style={style}>Actif</option>
                            <option value="inactive" style={style}>Inactif</option>
                        </select>
                    </div>
                    
                    <div className="form-actions" >
                        <button type="button" onClick={onCloseForm} className="form-button cancel">Annuler</button>
                        <button type="submit" className="form-button submit">
                            {userToEdit ? 'Enregistrer les modifications' : 'Ajouter Utilisateur'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
});

export default AddUserForm;
